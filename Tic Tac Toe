#include <iostream>
#include <list>
#include <cstdlib>
#include <string>
#include <ctime>
using namespace std;

// Struct to hold the winning combinations
typedef struct {
    int* positions;
} WinningCombo;

// Player class
class Player {
private:
    string name;
    int score;
public:
    Player() : Player("") {}
    Player(string n) : name(n), score(0) {}

    void incrementScore() { score++; }
    int getScore() const { return score; }
    string getName() const { return name; }
};

// TicTacToe game class
class TicTacToe {
private:
    char board[9];
    int availablePositions[9];
    int gameActive, isVsComputer;
    int availableCount;
    WinningCombo winCombos[8];

    void showBoard() const {
        cout << endl;
        cout << "   |   |   " << endl;
        cout << " " << board[0] << " | " << board[1] << " | " << board[2] << endl;
        cout << "   |   |   " << endl;
        cout << "-----------" << endl;
        cout << "   |   |   " << endl;
        cout << " " << board[3] << " | " << board[4] << " | " << board[5] << endl;
        cout << "   |   |   " << endl;
        cout << "-----------" << endl;
        cout << "   |   |   " << endl;
        cout << " " << board[6] << " | " << board[7] << " | " << board[8] << endl;
        cout << "   |   |   " << endl;
        cout << endl;
    }

    void computerMove() {
        int pos;
        pos = rand() % 9;
        if (availablePositions[pos] == 1) {
            if (availableCount < 0)
                return;
            computerMove();
        } else {
            cout << "Computer chose: " << pos + 1 << endl;
            availablePositions[pos] = 1;
            availableCount -= 1;
            board[pos] = 'O';
        }
    }

    void playerMove(Player& player) {
        int pos;
        cout << endl;
        cout << "\t" << player.getName() << "'s Turn: ";
        cout << "\t Enter the position: ";
        cin >> pos;
        pos -= 1;
        if (availablePositions[pos] == 1) {
            cout << "-----Position not available-------" << endl;
            playerMove(player);
        } else {
            availablePositions[pos] = 1;
            availableCount -= 1;
            player.getName() == "Player 1" ? board[pos] = 'X' : board[pos] = 'O';
        }
    }

    void checkWinner(Player& p1, Player& p2) {
        bool winFlag = false;
        char firstSymbol;
        for (int i = 0; i < 8; i++) {
            firstSymbol = board[winCombos[i].positions[0]];

            if ((firstSymbol != 'X') && (firstSymbol != 'O')) {
                winFlag = false;
                continue;
            }
            winFlag = true;
            for (int j = 0; j < 3; j++) {
                if (firstSymbol != board[winCombos[i].positions[j]]) {
                    winFlag = false;
                    break;
                }
            }
            if (winFlag) {
                gameActive = 0;
                if (firstSymbol == 'X') {
                    cout << "-----------------------" << endl;
                    cout << "\t Player 1 WON" << endl;
                    cout << "-----------------------" << endl;
                    p1.incrementScore();
                } else {
                    p2.incrementScore();
                    if (isVsComputer) {
                        cout << "-----------------------" << endl;
                        cout << "\t Computer WON" << endl;
                        cout << "-----------------------" << endl;
                    } else {
                        cout << "-----------------------" << endl;
                        cout << "\t Player 2 WON" << endl;
                        cout << "-----------------------" << endl;
                    }
                }
                showScores(p1, p2);
                break;
            }
        }
    }

    void playGame(Player& p1, Player& p2) {
        char rematch = '\0';
        int currentPlayer = 0;
        gameActive = 1;
        showBoard();
        while ((availableCount > 0) && (gameActive != 0)) {
            if (isVsComputer)
                currentPlayer == 1 ? computerMove() : playerMove(p2);
            else
                currentPlayer == 1 ? playerMove(p1) : playerMove(p2);
            currentPlayer = !currentPlayer;
            showBoard();
            checkWinner(p1, p2);
        }
        if (availableCount <= 0) {
            cout << "      -----------------------" << endl;
            cout << "\t No WINNER" << endl;
            cout << "      -----------------------" << endl;
        }
        cout << endl;
        cout << "Rematch? (Y/N): ";
        cin >> rematch;
        if ((rematch == 'Y') || (rematch == 'y')) {
            initialize();
            playGame(p1, p2);
        }
    }

    void showScores(const Player& p1, const Player& p2) const {
        cout << endl;
        cout << "\t SCORE: \t";
        if (isVsComputer)
            cout << " Player 1: " << p1.getScore() << " \t Computer: " << p2.getScore() << endl;
        else
            cout << " Player 1: " << p1.getScore() << " \t Player 2: " << p2.getScore() << endl;
    }

public:
    TicTacToe() : availableCount(0), gameActive(1), isVsComputer(0) {
        initialize();
        winCombos[0].positions = new int[3]{0, 1, 2};
        winCombos[1].positions = new int[3]{3, 4, 5};
        winCombos[2].positions = new int[3]{6, 7, 8};
        winCombos[3].positions = new int[3]{0, 3, 6};
        winCombos[4].positions = new int[3]{1, 4, 7};
        winCombos[5].positions = new int[3]{2, 5, 8};
        winCombos[6].positions = new int[3]{0, 4, 8};
        winCombos[7].positions = new int[3]{2, 4, 6};
    }

    void initialize() {
        gameActive = 1;
        availableCount = 0;
        srand(time(0));
        for (size_t i = 0; i < 9; i++) {
            availablePositions[i] = 0;
            board[i] = (i + 1) + '0';
            availableCount++;
        }
    }

    void singlePlayerGame() {
        // Creating Player
        Player player1("Player 1");
        Player computer("Computer");
        cout << "       -----------------------" << endl;
        cout << "\t Player 1: X \t Computer: O" << endl;
        cout << "       -----------------------" << endl;
        cout << endl;
        isVsComputer = 1;
        playGame(computer, player1);
    }

    void multiPlayerGame() {
        // Creating Players
        Player player1("Player 1");
        Player player2("Player 2");
        cout << "       -----------------------" << endl;
        cout << "\t Player 1: X \t Player 2: O" << endl;
        cout << "       -----------------------" << endl;
        cout << endl;
        isVsComputer = 0;
        playGame(player1, player2);
    }
};

int main() {
    int choice;

    while (true) {
        cout << "      ----------MENU----------" << endl;
        cout << "\t 1. Single Player Game" << endl;
        cout << "\t 2. Two Player Game" << endl;
        cout << "\t 3. Exit " << endl;
        cout << "      ------------------------" << endl;
        cout << endl;
        cout << "\t Select an option: ";
        cin >> choice;
        switch (choice) {
        case 1: {
            TicTacToe game;
            game.initialize();
            game.singlePlayerGame();
        }
        break;
        case 2: {
            TicTacToe game;
            game.initialize();
            game.multiPlayerGame();
        }
        break;
        case 3:
            return 0;
        default:
            cout << "OOPs Invalid Option! TRY AGAIN";
        }
    }
    return 0;
}
